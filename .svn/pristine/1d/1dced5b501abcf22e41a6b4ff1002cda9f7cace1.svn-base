import Vue from 'vue';
import {getQuery,checkEmail,login, register,checkClaim} from '../tools/operation';
import Router from 'vue-router';
Vue.use(Router);
import {setTitle} from '../tools/operation';
import {session} from '../tools/store';

let routes = [];

let beforeEach = ((to, from, next) => {
    let email = getQuery('email') || '';
    let password = getQuery('password') || '';
    let merchantId = getQuery('merchantId') || '';
    let toFrom = getQuery('from') || '';
    session.setItem('toFrom',toFrom);
    let oldEmail = session.getItem('oldEmail');
    let fromOld = session.getItem('fromOld');
    if(oldEmail != email && email){
        session.setItem('email',email);
        session.setItem('fromOld',true);
        checkEmail(email,password).then(res => {
            if(res.status == 1){
                login(email,password).then(()=>{
                    if (merchantId){
                        next()
                    }
                    checkClaim().then((res)=>{
                        let tofrom = session.getItem('toFrom');
                        if(tofrom == 'header' &&!res.isClaimed){
                            next({path: '/management/merchant/label-claim'})
                        }else{
                            next();
                        }
                    })
                });
            }else if(res.status == 0) {
                register(email,password).then(res=>{
                    login(email,password).then(()=>{
                        if(merchantId){
                            next()
                        }
                        checkClaim().then((res)=>{
                            let tofrom = session.getItem('toFrom');
                            if(tofrom == 'header' && !res.isClaimed){
                                next({path: '/management/merchant/label-claim'})
                            }else{
                                next();
                            }
                        })
                    });
                }).catch(error=>{
                    console.log('register error')
                });
            }
        });
        return false;
    }else if(fromOld){
        let isClaimed = session.getItem('isClaimed');
        let needClaimArr = ['attention-me','comment-list','my-service','post-message'];
        if(!isClaimed && needClaimArr.indexOf(to.name) > -1){
            next({path: '/management/merchant/no-claim'})
        }else{
            next();
        }
        
        return false;
    }
    //管理系统
    let authInfo = session.getItem('authInfo');
    if(to.path == '/management/login' || to.path == '/management/register' || to.path == '/management/reset-password'){
        next()
    }else {
        if (authInfo) {
            next()
        } else {
            session.setItem('logoutUrl', encodeURIComponent(window.location.href));
            window.location.href = 'http://test.hifleet.com/index.html';
        }
    }
});

import userRoutes from './merchant.js';
import managementRoutes from './management.js';

routes = routes.concat(managementRoutes).concat(userRoutes);

routes.map(route => {
    route.path = `/management${route.path}`;
    route.beforeEnter = (to, from, next) => {
        let {meta} = to;
        let {title} = meta;
        setTitle(title);
        if (!route.meta.login) {
            if (route.children) {
                next();
            }else{
                return beforeEach(to, from, next);
            }

        } else {
            next();
        }
    };
    if (route.children) {
        route.children.map(child => {
            child.beforeEnter = (to, from, next) => {
                let {meta} = to;
                let {title} = meta;
                setTitle(title);
                if (!child.meta.login) {
                    return beforeEach(to, from, next);
                } else {
                    next();
                }
            };
        });
    }

});
routes.push({
    path: '*',
    redirect: '/management/login'
});

export default new Router({
    mode: 'history',
    routes
})